name: Flutter Build and Upload to GDrive

on:
  push:
    branches:
      - 'build/*'
  pull_request:
    branches:
      - 'build/*'

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      folder_name: ${{ steps.set-vars.outputs.folder_name }}
    steps:
      - name: Set variables
        id: set-vars
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR title, replace spaces/special chars with dash
            pr_name=$(echo "${{ github.event.pull_request.title }}" | sed 's/[^a-zA-Z0-9]/-/g')
            echo "folder_name=builds/PR-${pr_name}" >> $GITHUB_OUTPUT
          else
            echo "folder_name=builds/${GITHUB_SHA}" >> $GITHUB_OUTPUT
          fi

  build-android:
    runs-on: self-hosted
    needs: vars
    steps:
      - uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: "stable"
          cache: true
      - name: Build Android Staging
        run: flutter build apk

  # build-ios:
  #   runs-on: self-hosted
  #   needs: vars
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "3.22.0"
  #         channel: "stable"
  #         cache: true
  #     - name: Build iOS Staging
  #       run: |
  #         fvm flutter build ipa --flavor stable --dart-define-from-file=.env/dev.json --release
  #         mv build/ios/ipa/*.ipa app-staging.ipa
  #     - name: Build iOS Prod
  #       run: |
  #         fvm flutter build ipa --flavor stable --dart-define-from-file=.env/prod.json --release
  #         mv build/ios/ipa/*.ipa app-prod.ipa
  #     - name: Upload IPA artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ios-builds
  #         path: |
  #           app-staging.ipa
  #           app-prod.ipa

  upload-and-notify:
    runs-on: self-hosted
    needs: [vars, build-android]
    steps:
      - name: Download Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-builds
      - name: Download iOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-builds
      - name: Setup rclone config
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONF }}" > ~/.config/rclone/rclone.conf
      - name: Upload to Google Drive
        run: |
          rclone mkdir gdrive:"${{ needs.vars.outputs.folder_name }}"
          rclone copy . gdrive:"${{ needs.vars.outputs.folder_name }}" \
            --include "app-*.apk" \
            --transfers=4 --checkers=8 --progress
      # - name: Send link to Mattermost
      #   run: |
      #     LINK="https://drive.google.com/drive/folders/$(rclone lsf gdrive:"${{ needs.vars.outputs.folder_name }}" --dirs-only --format p | head -n 1)"
      #     curl -X POST -H 'Content-Type: application/json' \
      #       -d "{\"text\":\"Build uploaded: ${LINK}\"}" \
      #       ${{ secrets.MATTERMOST_WEBHOOK }}
